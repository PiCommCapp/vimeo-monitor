[build-system]
requires = ["setuptools>=42", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "vimeo-monitor"
version = "1.0.0"
description = "A robust system for monitoring Vimeo live streams and displaying them full-screen"
readme = "README.md"
authors = [
    {name = "PiCommCapp", email = "info@picommcapp.com"}
]
license = {text = "MIT"}
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]
requires-python = ">=3.10"
dependencies = [
    "PyVimeo>=0.3.0",
    "requests>=2.25.0",
    "python-dotenv>=0.15.0",
]

[project.optional-dependencies]
health = [
    "fastapi>=0.68.0",
    "uvicorn>=0.15.0",
    "prometheus-client>=0.11.0",
    "psutil>=5.8.0",
]
dev = [
    "pytest>=6.2.5",
    "pytest-cov>=2.12.1",
    "black>=21.9b0",
    "isort>=5.9.3",
    "mypy>=0.910",
    "ruff>=0.0.254",
]

[tool.black]
line-length = 88
target-version = ["py310"]
include = '\.pyi?$'

[tool.isort]
profile = "black"
line_length = 88

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_functions = "test_*"
markers = [
    "unit: marks tests as unit tests",
    "integration: marks tests as integration tests",
    "slow: marks tests as slow tests",
    "error_scenarios: marks tests as error scenario tests",
    "documentation: marks tests as documentation tests",
    "health: marks tests as health monitoring tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "tests/*",
    "src/vimeo_monitor/health/*",
    "src/vimeo_monitor/health_module.py"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
]
fail_under = 50

[dependency-groups]
dev = [
    "pytest>=8.4.2",
    "pytest-cov>=7.0.0",
]
