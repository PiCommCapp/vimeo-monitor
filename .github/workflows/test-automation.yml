name: Test Automation

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of tests to run'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - unit
        - integration
        - error_scenarios
        - documentation
        - health
        - slow

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  test-automation:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.12, 3.13]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v2
      with:
        version: "latest"

    - name: Cache uv dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/uv
        key: ${{ runner.os }}-uv-${{ hashFiles('**/uv.lock') }}
        restore-keys: |
          ${{ runner.os }}-uv-

    - name: Install dependencies
      run: |
        uv sync --dev

    - name: Run selected tests
      id: test-run
      run: |
        case "${{ github.event.inputs.test_type || 'all' }}" in
          "unit")
            uv run pytest tests/ -v --cov=src --cov-report=xml --cov-report=html -m "unit"
            ;;
          "integration")
            uv run pytest tests/integration/ -v --cov=src --cov-report=xml --cov-report=html -m "integration"
            ;;
          "error_scenarios")
            uv run pytest tests/error_scenarios/ -v --cov=src --cov-report=xml --cov-report=html -m "error_scenarios"
            ;;
          "documentation")
            uv run pytest tests/test_documentation.py -v --cov=src --cov-report=xml --cov-report=html -m "documentation"
            ;;
          "health")
            uv run pytest tests/test_health_module.py -v --cov=src --cov-report=xml --cov-report=html -m "health"
            ;;
          "slow")
            uv run pytest tests/ -v --cov=src --cov-report=xml --cov-report=html -m "slow"
            ;;
          "all")
            uv run pytest tests/ -v --cov=src --cov-report=xml --cov-report=html
            ;;
        esac

    - name: Upload test results
      if: matrix.python-version == '3.12'
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ github.event.inputs.test_type || 'all' }}-py${{ matrix.python-version }}
        path: |
          coverage.xml
          htmlcov/
          .coverage
        retention-days: 30

    - name: Generate test report
      if: matrix.python-version == '3.12'
      run: |
        echo "# Test Automation Report" > test-report.md
        echo "" >> test-report.md
        echo "**Date:** $(date)" >> test-report.md
        echo "**Python Version:** ${{ matrix.python-version }}" >> test-report.md
        echo "**Test Type:** ${{ github.event.inputs.test_type || 'all' }}" >> test-report.md
        echo "" >> test-report.md
        echo "## Test Results" >> test-report.md
        echo "" >> test-report.md
        echo "\`\`\`" >> test-report.md
        uv run pytest tests/ --tb=no -q >> test-report.md 2>&1 || true
        echo "\`\`\`" >> test-report.md

    - name: Upload test report
      if: matrix.python-version == '3.12'
      uses: actions/upload-artifact@v4
      with:
        name: test-report-${{ github.event.inputs.test_type || 'all' }}
        path: test-report.md
        retention-days: 30

  test-summary:
    runs-on: ubuntu-latest
    needs: test-automation
    if: always()

    steps:
    - name: Download test results
      uses: actions/download-artifact@v4
      with:
        pattern: test-results-*
        path: test-results/

    - name: Generate summary
      run: |
        echo "# Test Automation Summary" > summary.md
        echo "" >> summary.md
        echo "**Date:** $(date)" >> summary.md
        echo "**Trigger:** ${{ github.event_name }}" >> summary.md
        echo "" >> summary.md
        echo "## Test Results by Python Version" >> summary.md
        echo "" >> summary.md
        
        for dir in test-results/*/; do
          if [ -d "$dir" ]; then
            echo "### $(basename "$dir")" >> summary.md
            echo "" >> summary.md
            if [ -f "$dir/coverage.xml" ]; then
              echo "✅ Coverage report generated" >> summary.md
            else
              echo "❌ No coverage report found" >> summary.md
            fi
            echo "" >> summary.md
          fi
        done

    - name: Upload summary
      uses: actions/upload-artifact@v4
      with:
        name: test-automation-summary
        path: summary.md
        retention-days: 30
