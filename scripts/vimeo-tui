#!/bin/bash

# Vimeo Monitor TUI - Command Line Interface
# This script provides access to the Vimeo Monitor Terminal User Interface from anywhere

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
INSTALL_DIR="/opt/vimeo-monitor"
SCRIPT_NAME="vimeo-tui"

# Function to print colored output
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Function to show help
show_help() {
    cat <<EOF
üöÄ Vimeo Monitor TUI - Terminal User Interface

USAGE:
    $SCRIPT_NAME [OPTIONS]

OPTIONS:
    -h, --help              Show this help message
    -v, --version           Show version information
    -d, --working-dir DIR   Set working directory
    -c, --config FILE       Use specific configuration file
    -l, --log-level LEVEL   Set log level (DEBUG, INFO, WARNING, ERROR, CRITICAL)
    --dev                   Run in development mode (from current directory)

EXAMPLES:
    $SCRIPT_NAME                    # Run TUI with default settings
    $SCRIPT_NAME --dev              # Run from current directory
    $SCRIPT_NAME -l DEBUG           # Run with debug logging
    $SCRIPT_NAME -d /custom/path    # Run from custom directory

KEYBOARD SHORTCUTS:
    q              Quit application
    r              Refresh data
    s              Switch to Status tab
    c              Switch to Configuration tab
    l              Switch to Logs tab
    m              Switch to Metrics view
    TAB            Navigate between widgets
    Arrow Keys     Navigate within widgets

DESCRIPTION:
    Interactive terminal interface for monitoring and managing Vimeo Monitor.
    Provides real-time status, metrics, configuration management, and log viewing.

EOF
}

# Function to show version
show_version() {
    echo "Vimeo Monitor TUI v1.0.0"
    echo "Terminal User Interface for Vimeo Stream Monitor"
}

# Function to detect installation
detect_installation() {
    local install_paths=(
        "$INSTALL_DIR"
        "$(pwd)"
        "$HOME/vimeo-monitor"
    )

    for path in "${install_paths[@]}"; do
        if [[ -d "$path/vimeo_monitor" ]]; then
            echo "$path"
            return 0
        fi
    done

    return 1
}

# Function to check Python environment
check_python_env() {
    local install_path="$1"

    # Check for virtual environment
    if [[ -f "$install_path/.venv/bin/python" ]]; then
        echo "$install_path/.venv/bin/python"
        return 0
    fi

    # Check for system Python with vimeo_monitor available
    if command -v python3 >/dev/null 2>&1; then
        if python3 -c "import vimeo_monitor" 2>/dev/null; then
            echo "python3"
            return 0
        fi
    fi

    return 1
}

# Main function
main() {
    local working_dir=""
    local config_file=""
    local log_level="WARNING"
    local dev_mode=false
    local extra_args=()

    # Parse command line arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
        -h | --help)
            show_help
            exit 0
            ;;
        -v | --version)
            show_version
            exit 0
            ;;
        -d | --working-dir)
            working_dir="$2"
            shift 2
            ;;
        -c | --config)
            config_file="$2"
            shift 2
            ;;
        -l | --log-level)
            log_level="$2"
            shift 2
            ;;
        --dev)
            dev_mode=true
            shift
            ;;
        *)
            extra_args+=("$1")
            shift
            ;;
        esac
    done

    # Development mode - run from current directory
    if [[ "$dev_mode" == "true" ]]; then
        log_info "Running in development mode from current directory"
        working_dir="$(pwd)"

        if [[ ! -d "vimeo_monitor" ]]; then
            log_error "Development mode requires vimeo_monitor directory in current path"
            exit 1
        fi
    fi

    # Detect installation if working directory not specified
    if [[ -z "$working_dir" ]]; then
        if ! working_dir=$(detect_installation); then
            log_error "Could not find Vimeo Monitor installation"
            log_info "Searched in:"
            log_info "  - $INSTALL_DIR (service installation)"
            log_info "  - $(pwd) (current directory)"
            log_info "  - $HOME/vimeo-monitor (user directory)"
            log_info ""
            log_info "Solutions:"
            log_info "  1. Install as service: make install-service"
            log_info "  2. Run from project directory: $SCRIPT_NAME --dev"
            log_info "  3. Specify custom path: $SCRIPT_NAME -d /path/to/vimeo-monitor"
            exit 1
        fi
    fi

    log_info "Using Vimeo Monitor installation at: $working_dir"

    # Detect Python environment
    if ! python_cmd=$(check_python_env "$working_dir"); then
        log_error "Could not find suitable Python environment"
        log_info "Expected virtual environment at: $working_dir/.venv/bin/python"
        log_info "Or system Python with vimeo_monitor package installed"
        log_info ""
        log_info "Solutions:"
        log_info "  1. Reinstall service: make install-service"
        log_info "  2. Create virtual environment: cd $working_dir && uv sync"
        exit 1
    fi

    log_success "Using Python: $python_cmd"

    # Change to working directory
    cd "$working_dir"

    # Build command arguments
    local cmd_args=()
    cmd_args+=("--log-level" "$log_level")

    if [[ -n "$config_file" ]]; then
        cmd_args+=("--config-file" "$config_file")
    fi

    cmd_args+=("--working-dir" "$working_dir")
    cmd_args+=("${extra_args[@]}")

    # Run the TUI
    log_info "Starting Vimeo Monitor TUI..."
    exec "$python_cmd" -m vimeo_monitor.cli_tui "${cmd_args[@]}"
}

# Run main function with all arguments
main "$@"
